
#Select fridge mode to work in
input_select:
  fridge_mode:
    name: Fridge mode
    options:
      - Off
      - Fridge constant
      - Beer constant
      - Beer profile
    icon: mdi:beer

# Either select a set beer temp or a set fridge temp.
input_number:
  beer_temp:
    name: Beer temp
    initial: 18
    min: 2
    max: 40
    step: 1
    unit_of_measurement: "ºC"
  fridge_temp:
    name: Fridge temp
    initial: 18
    min: 2
    max: 40
    step: 1
    unit_of_measurement: "ºC"

#And now some automations
automation:
#The first to sets temp based on the sliders above when used.    
  - alias: Set beer temp 
    trigger:
      platform: state
      entity_id: input_number.beer_temp
    action:
      - service: mqtt.publish
        data_template:
          topic: "/brewing/beerSet/"
          payload: '{{ states.input_number.beer_temp.state | int }}'
  - alias: Set fridge temp 
    trigger:
      platform: state
      entity_id: input_number.fridge_temp
    action:
      - service: mqtt.publish
        data_template:
          topic: "/brewing/fridgeSet"
          payload: '{{ states.input_number.fridge_temp.state | int }}'
#These set the selected mode
  - alias: Set fridge mode
    trigger:
      - platform: state
        entity_id: input_select.fridge_mode
    action:
      service: mqtt.publish
      data_template:
        topic: "/brewing/modeSet"
        payload_template: >-
          {% if states('input_select.fridge_mode', 'off') %}
            'o'      
          {% elif states('input_select.fridge_mode', 'Fridge constant') %}
            'f' 
          {% elif states('input_select.fridge_mode', 'Beer constant') %}
            'b' 
          {% elif states('input_select.fridge_mode', 'Beer profile') %}
            'p' 
          {% else %}
            'b'
          {% endif %}

#Sensors from brewpiless
sensor:
  - platform: mqtt
    name: "Brewing: Fridge temp"
    state_topic: "/brewing/fridgeTemp"
    qos: 0
    unit_of_measurement: "°C"

  - platform: mqtt
    name: "Brewing: Fridge set temp"
    state_topic: "/brewing/fridgeSet"
    qos: 0
    unit_of_measurement: "°C"

  - platform: mqtt
    name: "Brewing: Beer temp"
    state_topic: "/brewing/beerTemp"
    qos: 0
    unit_of_measurement: "°C"

  - platform: mqtt
    name: "Brewing: Set beer temp"
    state_topic: "/brewing/beerSet"
    qos: 0
    unit_of_measurement: "°C"

  - platform: mqtt
    name: "Brewing: state"
    state_topic: "/brewing/state"
    qos: 0


  - platform: mqtt
    name: "Brewing: mode"
    state_topic: "/brewing/mode"
    qos: 0

### iSpindel
  - platform: mqtt
    name: "Brewing: iSpindel Voltage"
    state_topic: "/brewing/voltage"
    qos: 0
    unit_of_measurement: "V"

  - platform: mqtt
    name: "Brewing: iSpindel Temp"
    state_topic: "/brewing/auxTemp"
    qos: 0
    unit_of_measurement: "°C"

  - platform: mqtt
    name: "Brewing: iSpindel tilt"
    state_topic: "/brewing/tilt"
    qos: 0
    unit_of_measurement: "°"

  - platform: mqtt
    name: "Brewing: iSpindel Gravity"
    state_topic: "/brewing/gravity"
    qos: 0
    unit_of_measurement: "SG"

  - platform: mqtt
    name: "Brewing: iSpindel Plato"
    state_topic: "/brewing/plato"
    qos: 0

  - platform: template
    sensors:
      brewing_state_text:
        friendly_name: 'Brewing: State text'
        value_template: >-
          {% if states.sensor.brewing_state.state | int==0 %}Idling
          {% elif states.sensor.brewing_state.state | int==1 %}Off
          {% elif states.sensor.brewing_state.state | int==2 %}Door Open
          {% elif states.sensor.brewing_state.state | int==3 %}Heating
          {% elif states.sensor.brewing_state.state | int==4 %}Cooling
          {% elif states.sensor.brewing_state.state | int==5 %}Waiting to Cool
          {% elif states.sensor.brewing_state.state | int==6 %}Waiting to Heat
          {% elif states.sensor.brewing_state.state | int==7 %}Waiting for Peak detect
          {% elif states.sensor.brewing_state.state | int==8 %}Cooling min. time
          {% elif states.sensor.brewing_state.state | int==9 %}Heating min. time
          {%- endif %}
        icon_template: >-
          {% if states.sensor.brewing_state.state | int==1 %}mdi:sleep
          {% elif states.sensor.brewing_state.state | int==2 %}mdi:lock
          {% elif states.sensor.brewing_state.state | int==3 %}mdi:fire
          {% elif states.sensor.brewing_state.state | int==4 %}mdi:snowflake
          {% elif states.sensor.brewing_state.state | int==5 %}mdi:lock
          {% elif states.sensor.brewing_state.state | int==6 %}mdi:sleep
          {%- endif %}

#----------- CUSTOMIZE -----------#
# Just some small polishing moves!
homeassistant:
  customize:
    sensor.brewing_state:
      templates:
        icon: >
          if (state == '3') return 'mdi:fire';
          elif (state == '4') return 'mdi:snowflake';
          elif (state == 'auto') return 'mdi:autorenew';
          elif (state == '1') return 'mdi:sleep';
          elif (state == '6') return 'mdi:sleep';
          return 'mdi:power-off';
        icon_color: >
          if (state == '3') return 'red';
          elif (state == '4') return 'blue';
          elif (state == 'auto') return 'green';
          elif (state == '1') return 'black';
          elif (state == '6') return 'mdi:sleep';