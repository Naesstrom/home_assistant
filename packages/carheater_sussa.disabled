#-------------------------------------------
#  Package to manage your carheater at winter
# Packaged by @Naesstrom
# Original Repo : https://github.com/gribber/ha
# Required components etc.
#  - SMHI weather component (or any other weather component that gives a upcoming low value)
#  - Either a single device tracker for you or even better a group of trackers.
#-------------------------------------------

#----------- SWITCHES -----------#
#This my configuration for a sonoff POW r2 with tasmota on it, change accordingly to what switch you are using
switch:
  platform: mqtt
  name: "Engine heater sussa"
  command_topic: "cmnd/carheater_1/POWER"
  state_topic: "stat/carheater_1/POWER"
  qos: 1
  payload_on: "ON"
  payload_off: "OFF"
  retain: true


#----------- BINARY SENSOR -----------#
# We first need to be able to tell home-assistant if it's a workday (change country as needed)
binary_sensor:
  - platform: workday
    country: SE
    name: Arbetsdag

  - platform: mqtt
    name: "sonoff-Carheater_1 lwt"
    state_topic: "tele/carheater_1/LWT"
    value_template: "{{ value }}"
    payload_on: "Online"
    payload_off: "Offline"
    device_class: connectivity

#----------- SENSOR -----------#
# First off some sensors. required components is the SMHI weather addon.
# If you don't use that replace the correct sensors below to someone that you use.
sensor:
- platform: template
  sensors:
    heater_departuretime_sussa:
      friendly_name: 'Departure time sussa'
      value_template: '{% if states.input_number.heater_hour_sussa.state|round(0)|string|length == 1 %}0{% endif %}{{ states.input_number.heater_hour_sussa.state|round(0)|string }}:{% if states.input_number.heater_minute_sussa.state|round(0)|string|length == 1 %}0{% endif %}{{ states.input_number.heater_minute_sussa.state|round(0)|string }}'

    heater_activationtime_sussa:
      friendly_name: 'Calculated activation time sussa'
      value_template: >-
        {% set atime = (states.sensor.heater_temptime_sussa.state|round(0) * 60) %}
        {% if states.input_number.heater_hour_sussa.state|round(0)|string|length == 1 %} {% set time = 0 %} {% endif %}
        {% set time = time|string + states.input_number.heater_hour_sussa.state|round(0)|string + ':' %}
        {% if states.input_number.heater_minute_sussa.state|round(0)|string|length == 1 %} {% set time = time|string + '0' %} {% endif %}
        {% set time = time|string + states.input_number.heater_minute_sussa.state|round(0)|string %}
        {{ (as_timestamp(now().strftime("%Y-%m-%d") + ' ' + time) - atime) | timestamp_custom("%H:%M")|string }}

    heater_temptime_sussa:
      friendly_name: 'Temperature adjusted time sussa'
      value_template: >-
        {% set temp = states.sensor.heater_forecast_sussa.state|int %}
        {% if temp <= -15 %} {% set t = 1 %}
        {% elif temp > 5 %} {% set t = 20 %}
        {% else %} {% set t = (15 + temp) %} {% endif %}
        {{ (states.input_number.heater_maxmin_sussa.state|round(0)/(t**0.3))|int }}

    heater_forecast_sussa:
      friendly_name: 'Temperature forecast sussa'
      value_template: >-
        {% if states.sensor.time.state < states.sensor.heater_departuretime_sussa.state and states.sensor.time.state > '00:00' %}
        {% set forecast = states.weather.smhi_home.attributes.forecast[0].templow %}
        {% else %}
        {% set forecast = states.weather.smhi_home.attributes.temperature %}
        {% endif %}
        {{ forecast }}

# these sensors are optional and only works if you are using a sonoff POW r2, otherwise delete them
- platform: mqtt
  name: "Carheater 1 Todays Energy"
  state_topic: "tele/carheater_1/SENSOR"
  value_template: '{{ value_json["ENERGY"]["Today"] }}'
  unit_of_measurement: "kWh"
- platform: mqtt
  name: "Carheater 1 Power"
  state_topic: "tele/carheater_1/SENSOR"
  value_template: '{{ value_json["ENERGY"]["Power"] }}'
  unit_of_measurement: "W"
- platform: mqtt
  name: "Carheater 1 Voltage"
  state_topic: "tele/carheater_1/SENSOR"
  value_template: '{{ value_json["ENERGY"]["Voltage"] }}'
  unit_of_measurement: "V"
- platform: mqtt
  name: "Carheater 1 Current"
  state_topic: "tele/carheater_1/SENSOR"
  value_template: '{{ value_json["ENERGY"]["Current"] }}'
  unit_of_measurement: "A"



#----------- AUTOMATION -----------#

# Here are the automations needed (make sure you replace relevant parts)
automation:
  - alias: "Engine heater activate sussa"
    trigger:
      platform: template
      value_template: '{{ states.sensor.heater_activationtime_sussa.state == states.sensor.time.state }}'
    condition:
      condition: and
      conditions:
        - condition: state
          # replace entity_id below with your own tracker (group or single)
          entity_id: group.sussa
          # if your home zone is called home
          state: home
        - condition: or
          # Below checks if it's a workday or not
          conditions:
            - condition: state
              entity_id: input_boolean.workdays_only_sussa
              state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.arbetsdag
                  state: 'on'
                - condition: state
                  entity_id: input_boolean.workdays_only_sussa
                  state: 'on'
    # If the above conditions are fulfilled, ie. you are home and it's a workday
    # then activate the heater on your selected time
    action:
      - service: switch.turn_on
        # Don't forget to select the correct switch
        entity_id: switch.sussas_carheater

  # Automation 2 turns off the car heater at the set delay.
  - alias: "Engine heater deactivate sussa"
    trigger:
      platform: template
      value_template: '{{ states.sensor.heater_activationtime_sussa.state == states.sensor.time.state }}'
    action:
      - delay:
          minutes: "{{ states('input_number.heater_delay_sussa') | int }}"
      - service: switch.turn_off
        # Don't forget to select the correct switch
        entity_id: switch.sussas_carheater

#----------- INPUT BOOLEAN -----------#
# Creates a input boolean so that the heater is only active on workdays
input_boolean:
  workdays_only_sussa:
    name: Only active on workdays sussa
    initial: true

#----------- INPUT NUMBER -----------#
# Input numbers to set the time
input_number:
  heater_hour_sussa:
    name: Hour sussa
    icon: mdi:timer
    initial: 07
    min: 0
    max: 23
    step: 1

  heater_minute_sussa:
    name: Minute sussa
    icon: mdi:timer
    initial: 10
    min: 0
    max: 55
    step: 5

  heater_delay_sussa:
    name: Time to overrun sussa
    icon: mdi:timer
    initial: 30
    min: 0
    max: 59
    step: 1
    unit_of_measurement: min

  heater_maxmin_sussa:
    name: Maximum runtime sussa
    icon: mdi:timer
    initial: 180
    min: 30
    max: 240
    step: 10
    unit_of_measurement: min

#----------- GROUP -----------#
# Creates a group with all sensors, sliders etc.
group:
  engine_heater_sussa:
    name: Engine heater sussa
    control: hidden
    entities:
      - sensor.heater_departuretime_sussa
      - sensor.heater_activationtime_sussa
      - sensor.heater_temptime_sussa
      - sensor.heater_forecast_sussa
#The following 3 are from the sonoff POW
      - sensor.carheater_1_current
      - sensor.carheater_1_power
      - sensor.carheater_1_voltage
#these are for the automations
      - input_number.heater_hour_sussa
      - input_number.heater_minute_sussa
      - input_number.heater_delay_sussa
      - input_number.heater_maxmin_sussa
      - input_boolean.workdays_only_sussa
      - switch.engine_heater_sussa

#----------- CUSTOMIZE -----------#
# Just some small polishing moves!
homeassistant:
  customize:
    sensor.heater_forecast_sussa:
      unit_of_measurement: ÂºC
      icon: mdi:temperature-celsius
    sensor.heater_temptime_sussa:
      unit_of_measurement: min
      icon: mdi:timer
