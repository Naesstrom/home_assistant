#-------------------------------------------
#  Package to manage your carheater at winter
# Packaged by @Naesstrom
# Original Repo : https://github.com/gribber/ha
# Required components etc.
#  - SMHI weather component (or any other weather component that gives a upcoming low value)
#  - Either a single device tracker for you or even better a group of trackers.
#-------------------------------------------

#----------- BINARY SENSOR -----------#
# We first need to be able to tell home-assistant if it's a workday (change country as needed)
binary_sensor:
  - platform: workday
    country: SE
    name: Arbetsdag

#----------- SENSOR -----------#
# First off some sensors. required components is the SMHI weather addon.
# If you don't use that replace the correct sensors below to someone that you use.
sensor:
- platform: template
  sensors:
    wife_heater_departuretime:
      friendly_name: 'Departure time (Wife)'
      value_template: '{% if states.input_number.heater_hour_wife.state|round(0)|string|length == 1 %}0{% endif %}{{ states.input_number.heater_hour_wife.state|round(0)|string }}:{% if states.input_number.heater_minute_wife.state|round(0)|string|length == 1 %}0{% endif %}{{ states.input_number.heater_minute_wife.state|round(0)|string }}'

    wife_heater_activationtime:
      friendly_name: 'Calculated activation time (wife)'
      value_template: >-
        {% set atime = (states.sensor.wife_heater_temptime.state|round(0) * 60) %}
        {% if states.input_number.heater_hour_wife.state|round(0)|string|length == 1 %} {% set time = 0 %} {% endif %}
        {% set time = time|string + states.input_number.heater_hour_wife.state|round(0)|string + ':' %}
        {% if states.input_number.heater_minute_wife.state|round(0)|string|length == 1 %} {% set time = time|string + '0' %} {% endif %}
        {% set time = time|string + states.input_number.heater_minute_wife.state|round(0)|string %}
        {{ (as_timestamp(now().strftime("%Y-%m-%d") + ' ' + time) - atime) | timestamp_custom("%H:%M")|string }}

    wife_heater_temptime:
      friendly_name: 'Temperature adjusted time (wife)'
      value_template: >-
        {% set temp = states.sensor.wife_heater_forecast.state|int %}
        {% if temp <= -15 %} {% set t = 1 %}
        {% elif temp > 5 %} {% set t = 20 %}
        {% else %} {% set t = (15 + temp) %} {% endif %}
        {{ (states.input_number.heater_maxmin_wife.state|round(0)/(t**0.3))|int }}

    wife_heater_forecast:
      friendly_name: 'Temperature forecast (wife)'
      value_template: >-
        {% if states.sensor.time.state < states.sensor.wife_heater_departuretime.state and states.sensor.time.state > '00:00' %}
        {% set forecast = states.weather.smhi_home.attributes.forecast[0].templow %}
        {% else %}
        {% set forecast = states.weather.smhi_home.attributes.temperature %}
        {% endif %}
        {{ forecast }}

#----------- AUTOMATION -----------#

# Here are the automations needed (make sure you replace relevant parts)
automation:
  - alias: "Engine heater activate (wife)"
    trigger:
      platform: template
      value_template: '{{ states.sensor.wife_heater_activationtime_(wife).state == states.sensor.time.state }}'
    condition:
      condition: and
      conditions:
        - condition: state
          # replace entity_id below with your own tracker (group or single)
          entity_id: group.wife_device_trackers
          # if your home zone is called home
          state: home
        - condition: or
          # Below checks if it's a workday or not
          conditions:
            - condition: state
              entity_id: input_boolean.wife_workdays_only
              state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.arbetsdag
                  state: 'on'
                - condition: state
                  entity_id: input_boolean.wife_workdays_only
                  state: 'on'
    # If the above conditions are fulfilled, ie. you are home and it's a workday
    # then activate the heater on your selected time
    action:
      - service: switch.turn_on
        # Don't forget to select the correct switch
        entity_id: switch.switch_engine_heater_wife

  # Automation 2 turns off the car heater at the set delay.
  - alias: "Engine heater deactivate"
    trigger:
      platform: template
      value_template: '{{ states.sensor.heater_departuretime_(wife).state == states.sensor.time.state }}'
    action:
      - delay:
          minutes: "{{ states('input_number.heater_delay_(wife)') | int }}"
      - service: switch.turn_off
        # Don't forget to select the correct switch
        entity_id: switch.switch_engine_heater_wife

#----------- INPUT BOOLEAN -----------#
# Creates a input boolean so that the heater is only active on workdays
input_boolean:
  wife_workdays_only:
    name: Only active on workdays (wife)
    initial: true

#----------- INPUT NUMBER -----------#
# Input numbers to set the time
input_number:
  heater_hour_wife:
    name: Hour (wife)
    icon: mdi:timer
    initial: 07
    min: 0
    max: 23
    step: 1

  heater_minute_wife:
    name: Minute (wife)
    icon: mdi:timer
    initial: 00
    min: 0
    max: 55
    step: 5

  heater_delay_wife:
    name: Time to overrun (wife)
    icon: mdi:timer
    initial: 30
    min: 0
    max: 59
    step: 1
    unit_of_measurement: min

  heater_maxmin_wife:
    name: Maximum runtime (wife)
    icon: mdi:timer
    initial: 120
    min: 30
    max: 240
    step: 10
    unit_of_measurement: min

#----------- GROUP -----------#
# Creates a group with all sensors, sliders etc.
group:
  engine_heater_wife:
    name: Engine heater (wife)
    control: hidden
    entities:
      - sensor.wife_heater_departuretime
      - sensor.wife_heater_activationtime
      - sensor.wife_heater_temptime
      - sensor.wife_heater_forecast
      - input_number.heater_hour_wife
      - input_number.heater_minute_wife
      - input_number.heater_delay_wife
      - input_number.heater_maxmin_wife
      - input_boolean.wife_workdays_only
      - switch.switch_engine_heater_wife

#----------- CUSTOMIZE -----------#
# Just some small polishing moves!
homeassistant:
  customize:
    sensor.heater_forecast:
      unit_of_measurement: C
      icon: mdi:temperature-celsius
    sensor.heater_temptime:
      unit_of_measurement: min
      icon: mdi:timer
